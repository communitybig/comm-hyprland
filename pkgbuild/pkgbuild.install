#!/usr/bin/env bash
# -*- coding: utf-8 -*-

export TERM=${TERM:-xterm}
export TERM=${TERM:-xterm-256color}

# Defining color variables (bold only)
declare black="\033[1;30m"
declare red="\033[1;31m"
declare green="\033[1;32m"
declare yellow="\033[1;33m"
declare blue="\033[1;34m"
declare magenta="\033[1;35m"
declare cyan="\033[1;36m"
declare white="\033[1;37m"

# Setting variables for bold and reset
declare bold="\033[1m"
declare reset="\033[0m"
declare WM='hyprland'
declare pkgname=comm-"${WM}"
declare IS_UPGRADE=false

msg() {
	local msg="$1"
	echo -e "${green}==>[$pkgname] ${bold}${yellow}${msg}${reset}" >&2
}

sh_load_optdepends() {
	local info_file="/usr/share/${pkgname}/optdepends"

	if [[ -f "$info_file" && -r "$info_file" ]]; then
		mapfile -t OPTDEPENDS <"$info_file"
	else
		msg "${red}FATAL: Something went wrong! File '$info_file' not found or without read permission."
		msg "${red}FATAL: Something went wrong! File '$info_file' not found or without read permission."
	fi
}

sh_start_dbus_in_chroot() {
	# Check if D-Bus is already running
	if ! pgrep -x "dbus-daemon" >/dev/null; then
		# Creates the directory for the D-Bus socket
		mkdir -p /run/dbus
		chmod 755 /run/dbus

		# Start the D-Bus
		dbus-daemon --system --fork

		# Set environment variables
		export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/dbus/system_bus_socket
		export DBUS_SYSTEM_BUS_ADDRESS=unix:path=/run/dbus/system_bus_socket
	fi
}
pre_install() {
	if [[ -f /var/lib/pacman/db.lck ]]; then
		rm -f /var/lib/pacman/db.lck &>/dev/null
	fi
	msg "Updating the system, please wait!!!"
	pacman -Syu --noconfirm >/dev/null 2>&1;
}

post_install() {
	msg "Initializing system installation and configuration..."

	sh_load_optdepends

	[[ -e /etc/environment ]] && source /etc/environment
	: "${IN_CHROOT_INSTALLER:=false}"
	: "${IN_CHROOT_INSTALLER_USER:=root}"

	if [[ -f /var/lib/pacman/db.lck ]]; then
		rm -f /var/lib/pacman/db.lck &>/dev/null
	fi

	# Common packages for all GPUs
	COMMON_PACKAGES=(
		mhwd-biglinux
		mesa
		lib32-mesa
		vulkan-mesa-layers
		lib32-vulkan-mesa-layers
	)

	synchronizing_database() {
		pacman -Sy --quiet --noconfirm &>/dev/null
	}

	install_packages() {
		pacman -S --quiet --noconfirm --needed --overwrite \* "$@" &>/dev/null
	}

	msg "Please wait, synchronizing databases..."
	synchronizing_database

	msg "Installing common packages: ${COMMON_PACKAGES[*]}"
	install_packages "${COMMON_PACKAGES[@]}"

	msg "Installing optdepends packages: ${OPTDEPENDS[*]}"
	install_packages "${OPTDEPENDS[@]}"

	msg "Detecting GPU and installing appropriate drivers..."
	GPU_INFO=$(lspci -nnk | grep -A3 -E "VGA|3D|Display")

	if grep -qiw "NVIDIA" <<<"$GPU_INFO"; then
		msg "NVIDIA detected! Installing drivers..."

		msg "Detect kernel version and set package name"
		KERNEL_VERSION=$(uname -r | cut -d '.' -f1,2 | tr -d '.')
		KERNEL_PACKAGE="linux${KERNEL_VERSION}-nvidia"

		msg "Detected kernel: $KERNEL_VERSION"
		msg "Installing NVIDIA packages: $KERNEL_PACKAGE nvidia-utils nvidia-settings"
		install_packages "$KERNEL_PACKAGE" nvidia-utils nvidia-settings

		msg "Blacklisting Nouveau..."
		cat <<EOF | tee /etc/modprobe.d/nouveau.conf /etc/modprobe.d/blacklist.conf
blacklist nouveau
install nouveau /bin/true
EOF
	elif grep -qiw "Intel" <<<"$GPU_INFO"; then
		msg "Intel GPU detected! Installing drivers..."
		install_packages vulkan-intel lib32-vulkan-intel
		:
	elif grep -qEiw "AMD|ATI" <<<"$GPU_INFO"; then
		msg "AMD/ATI GPU detected! Installing drivers..."
		install_packages mesa-utils \
			vulkan-icd-loader lib32-vulkan-icd-loader \
			vulkan-headers vulkan-radeon lib32-vulkan-radeon \
			mhwd-amdgpu mhwd-ati
		:
	else
		msg "${yellow}Warning: No compatible GPU detected. Skipping driver installation.${reset}"
	fi

	# Create the 'sddm' user if it doesn't exist
	if ! id "sddm" >/dev/null; then
		msg "Creating SDDM user..."
		useradd -r -s /usr/bin/nologin -M -d /var/lib/sddm sddm &>/dev/null
	else
		msg "SDDM user already exists, skipping creation."
	fi

	# Ensure SDDM directory exists with correct permissions
	msg "Setting up SDDM directory..."
	mkdir -p /var/lib/sddm >/dev/null
	chown -R sddm:sddm /var/lib/sddm >/dev/null

	msg "Checking if /etc/sddm.conf already exists..."
	#Change SDDM config
	if [[ -f /etc/sddm.conf ]]; then
		msg "Existing /etc/sddm.conf found. Creating a backup at /etc/sddm.conf.bak..."
		mv -f /etc/sddm.conf /etc/sddm.conf.bak >/dev/null
		msg "Applying new SDDM configuration..."
		mv -f /etc/sddm.conf.pacnew /etc/sddm.conf >/dev/null
	elif [[ -f /etc/sddm.conf.pacnew ]]; then
		msg "No existing SDDM configuration found. Using default settings..."
		mv -f /etc/sddm.conf.pacnew /etc/sddm.conf >/dev/null
	fi
	# Change SDDM default Cursor
	if [[ -f /usr/share/icons/default/index.theme ]]; then
		msg "Found existing cursor configuration at /usr/share/icons/default/index.theme. Creating a backup at /usr/share/icons/default/index.theme.bak..."
		mv /usr/share/icons/default/index.theme /usr/share/icons/default/index.theme.bak >/dev/null
		msg "Applying new mouse cursor configuration..."
		mv /usr/share/icons/default/index.theme.pacnew /usr/share/icons/default/index.theme >/dev/null
	elif [[ -f /usr/share/icons/default/index.theme.pacnew ]]; then
		msg "No existing cursor configuration found. Applying default settings..."
		mv /usr/share/icons/default/index.theme.pacnew /usr/share/icons/default/index.theme >/dev/null
	fi
	# Configure dotfiles and user settings
	msg "Setting up dotfiles symlinks..."
	user=$(awk -F: '$3 >= 1000 && $3 < 65000 { print $1; exit }' /etc/passwd)
	if $IN_CHROOT_INSTALLER; then
		if [[ -n $IN_CHROOT_INSTALLER_USER || $IN_CHROOT_INSTALLER_USER != 'root' ]]; then
			user=$IN_CHROOT_INSTALLER_USER
		fi
	fi
	user_home=$(getent passwd "$user" | cut -d: -f6)
	dotfiles_dir="$user_home/dotfiles"

	# Copy dotfiles if they don't exist
	[[ ! -d "$dotfiles_dir" ]] && {
		msg "Copying dotfiles to $user_home..."
		mkdir -p "$user_home" &>/dev/null
		cp -r /etc/skel/dotfiles "$user_home/" &>/dev/null
		chown -R "$user:$user" "$dotfiles_dir" &>/dev/null
		chmod -R 700 "$dotfiles_dir" &>/dev/null
	}

	# Ensure necessary directories exist
	mkdir -p "$user_home/.backup" "$user_home/.config" &>/dev/null
	chown "$user:$user" "$user_home/.backup" "$user_home/.config" &>/dev/null

	msg "Creating symlinks for home directory files..."
	for file in .bashrc .gtkrc-2.0 .Xresources; do
		if [[ -e "$user_home/$file" ]] && [[ ! -L "$user_home/$file" ]]; then
			msg "Backing up existing $file..."
			mv "$user_home/$file" "$user_home/.backup/$file" >/dev/null
		fi
		ln -sf "$dotfiles_dir/$file" "$user_home/$file" >/dev/null
	done
	chown -h "$user:$user" "$user_home/.bashrc" "$user_home/.gtkrc-2.0" "$user_home/.Xresources" >/dev/null

	msg "Creating symlinks for configuration directories..."
	config_dirs=(mimeapps.list bashrc dunst fastfetch gtk-3.0 gtk-4.0 hypr kitty ml4w nvim nwg-dock-hyprland ohmyposh qt6ct rofi swaync vim wal waybar waypaper wlogout xsettingsd)

	for dir in "${config_dirs[@]}"; do
		if [[ -e "$user_home/.config/$dir" && ! -L "$user_home/.config/$dir" ]]; then
			msg "Backing up existing ~/.config/$dir..."
			mv "$user_home/.config/$dir" "$user_home/.backup/$dir" &>/dev/null
		fi
		if [[ ! -e "$user_home/.config/$dir" ]]; then
			msg "Creating symlink for ~/.config/$dir..."
			ln -sf "$dotfiles_dir/.config/$dir" "$user_home/.config/$dir" &>/dev/null
		fi
	done
	chown -hR "$user:$user" "$user_home/.config/" >/dev/null

	# Apply wallpaper using Pywal
	if command -v wal &>/dev/null; then
		msg "Applying wallpaper using Pywal for user: $user"
		sudo -u "$user" wal -i /usr/share/backgrounds/community/animal-hpr-001.jpg >/dev/null
	else
		msg "${yellow}Warning: 'wal' command not found. Skipping wallpaper setup.${reset}"
	fi

	# Install GNOME Platform runtime globally
	msg "Installing GNOME Platform runtime..."

	if $IN_CHROOT_INSTALLER; then
    sh_start_dbus_in_chroot
  fi
	flatpak install -y org.gnome.Platform/x86_64/47 &>/dev/null

	# Configure Nautilus
	msg "Configuring Nautilus..."
	if glib-compile-schemas /usr/share/glib-2.0/schemas/; then
		msg "Nautilus schemas compiled successfully!"
	else
		msg "${yellow}Warning: Failed to compile Nautilus schemas. Some features may not work correctly.${reset}"
	fi

	if ! $IS_UPGRADE; then
		msg "Enabling SDDM..."
		if ! systemctl enable sddm &>/dev/null; then
			msg "${red}Error: It went wrong when activating SDDM"
		fi
	fi

	# Install local Flatpak applications
	msg "Installing local Flatpak apps..."
	flatpak_dir="/etc/skel/dotfiles/flatpak"
	for app in calendar welcome settings sidebar; do
		flatpak_file="$flatpak_dir/com.ml4w.${app}.flatpak"
		if [[ -f "$flatpak_file" ]]; then
			#			sudo -u "$user" bash -c "flatpak install --user -y '$flatpak_file'" &>/dev/null
			#su - "$user" -c "flatpak install --user -y '$flatpak_file'" &>/dev/null
			flatpak install -y "$flatpak_file" &>/dev/null
			msg ":: com.ml4w.${app}.flatpak installed"
		else
			msg "${yellow}Warning: $flatpak_file not found, skipping...${reset}"
		fi
	done
	msg "Flatpak applications installed successfully!"

	if ! $IN_CHROOT_INSTALLER; then
		if ! $IS_UPGRADE; then
			msg "Please wait, Generating initramfs for all kernels..."
			mkinitcpio -P &>/dev/null

			msg "Configuring GRUB..."
			# Change GRUB config
			if ! grep -qi "${WM}" /etc/default/grub; then
				sed -i "s/^GRUB_DISTRIBUTOR=\"\(.*\)\"/GRUB_DISTRIBUTOR=\"\1 ${WM^}\"/" /etc/default/grub
			fi
			sed -i 's|^GRUB_CMDLINE_LINUX_DEFAULT=.*|GRUB_CMDLINE_LINUX_DEFAULT="quiet splash plymouth.enable=1 loglevel=4 libata.noacpi=1 acpi=force apm=power-off nowatchdog tsc=nowatchdog cryptomgr.notests no_timer_check rcupdate.rcu_expedited=1 intel_pstate=active amd_pstate=active cpuidle.governor=teo split_lock_detect=off clearcpuid=514 transparent_hugepage=never skew_tick=1 intremap=off nosoftlockup audit=0 nomce systemd.show_status=auto rd.udev.log_level=3 apparmor=1 security=apparmor vconsole.font=Uni2-Fixed16 intel_iommu=on amd_iommu=on tdx=on nvme_load=yes nouveau.modeset=1 i915.modeset=1 amdgpu.modeset=1 radeon.si_support=0 radeon.cik_support=0 amdgpu.si_support=1 amdgpu.cik_support=1 nvidia.modeset=1 nvidia_drm.modeset=1 DEEPIN_GFXMODE="|' /etc/default/grub 1>/dev/null

			msg "Generating GRUB configuration files..."
			update-grub &>/dev/null
		fi
	fi

	msg "Removing Hyprland-UWSM entry from SDDM..."
	rm -f /usr/share/wayland-sessions/hyprland-uwsm.desktop &>/dev/null

	if ! $IS_UPGRADE; then
		msg "Installation complete. Rebooting in 10 seconds..."
		# Countdown before reboot
		for i in $(seq 10 -1 1); do
			printf "%d..." "$i"
			sleep 1
		done
		echo
		msg "Rebooting now..."
		reboot
	else
		msg "Upgrade complete."
	fi
}

post_remove() {
	msg "Removing symlinks and restoring backups..."
	user=$(awk -F: '$3 >= 1000 && $3 < 65000 { print $1; exit }' /etc/passwd)
	user_home=$(getent passwd "$user" | cut -d: -f6)

	# Restore home directory files
	for file in .bashrc .gtkrc-2.0 .Xresources .zshrc; do
		if [[ -L "$user_home/$file" ]]; then
			rm "$user_home/$file" >/dev/null
			[[ -e "$user_home/.backup/$file" ]] && {
				mv "$user_home/.backup/$file" "$user_home/$file"
			}
		fi
	done
	.bashrc
	# Restore configuration directories
	config_dirs=(mimeapps.list bashrc dunst fastfetch gtk-3.0 gtk-4.0 hypr kitty ml4w nvim nwg-dock-hyprland ohmyposh qt6ct rofi swaync vim wal waybar waypaper wlogout xsettingsd)
	for dir in "${config_dirs[@]}"; do
		if [[ -L "$user_home/.config/$dir" ]]; then
			rm "$user_home/.config/$dir" >/dev/null
			[[ -e "$user_home/.backup/$dir" ]] && mv "$user_home/.backup/$dir" "$user_home/.config/$dir" >/dev/null
		fi
	done

	# Reload .bashrc for the user
	if [[ -f "$user_home/.bashrc" ]]; then
		msg "Reloading .bashrc for user: $user"
		sudo -u "$user" bash -c "source $user_home/.bashrc" >/dev/null
	fi
	msg "Restoring files from SDDM..."
	mv -f /etc/sddm.conf.bak /etc/sddm.conf >/dev/null
	
	msg "Restoring Cursor Theme..."
	mv -f /usr/share/icons/default/index.theme.bak /usr/share/icons/default/index.theme  >/dev/null	

	msg "Symlinks removed, backups restored, and .bashrc reloaded for user: $user!"
}

post_upgrade() {
	IS_UPGRADE=true
	post_install
}
